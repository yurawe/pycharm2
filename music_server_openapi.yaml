openapi: 3.0.3
info:
  title: Music Service
  description: |-
   The service for creating playlists and editing songs, albums, artists, users resources.
  contact:
    email: anastasiia.kudybovska.kn.2021@lpnu.ua
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: https://musicservice/api/v1
tags:
  - name: user
    description: Operations about user
  - name: song
    description: Everything about songs
  - name: artist
    description: Everything about artist
  - name: implementation
    description: Access to atrtist songs
  - name: playlist
    description: Everything about playlist
  - name: playlist_song
    description: Access to song in playlist
  - name: user_playlist
    description: Access to user playlist
paths:
  /song:
    put:
      tags:
        - song
      summary: Update an existing song
      description: Update an existing song by Id
      operationId: updateSong
      requestBody:
        description: Update an existent song in the playlist
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Song'
          application/xml:
            schema:
              $ref: '#/components/schemas/Song'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Song'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Song'
        '400':
          description: Invalid ID supplied
        '404':
          description: Song not found
        '405':
          description: Validation exception
      security:
        - musicservice_auth:
            - write:song
            - read:song
    post:
      tags:
        - song
      summary: Add a new song to the music service
      description: Add a new song to the music service
      operationId: addSong
      requestBody:
        description: Create a new song in the music service
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Song'
          application/xml:
            schema:
              $ref: '#/components/schemas/Song'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Song'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Song'
        '405':
          description: Invalid input
      security:
        - musicservice_auth:
            - write:song
            - read:song
  /song/findByGenre:
    get:
      tags:
        - song
      summary: Finds Songs by genre
      description: Multiple genre values can be provided with comma separated strings
      operationId: findSongsByGenre
      parameters:
        - name: genre
          in: query
          description: Genre values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'
        '400':
          description: Invalid genre value
      security:
        - musicservice_auth:
            - read:songs
  /song/findByAlbum:
    get:
      tags:
        - song
      summary: Finds Songs by album
      description: Multiple album values can be provided with comma separated strings
      operationId: findSongsByAlbum
      parameters:
        - name: album
          in: query
          description: Album values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'
        '400':
          description: Invalid genre value
      security:
        - musicservice_auth:
            - read:songs 
  /song/findByLanguage:
    get:
      tags:
        - song
      summary: Finds Songs by language
      description: Multiple languages values can be provided with comma separated strings
      operationId: findSongsByLanguage
      parameters:
        - name: language
          in: query
          description: Language values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'
        '400':
          description: Invalid language value
      security:
        - musicservice_auth:
            - read:songs 
  /songs:
    get:
      tags:
        - song
      summary: Get list of songs
      description: Returns a list of songs
      operationId: getSongs
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'
        '404':
          description: Songs not found
      security:
        - api_key: []
        - musicservice_auth:
            - read:songs 
  /song/{songId}:
    get:
      tags:
        - song
      summary: Find song by ID
      description: Returns a single song
      operationId: getSongById
      parameters:
        - name: songId
          in: path
          description: ID of song to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Song'
        '400':
          description: Invalid ID supplied
        '404':
          description: Song not found
      security:
        - musicservice_auth:
            - read:songs 
    post:
      tags:
        - song
      summary: Updates a song in the music service with form data
      description: ''
      operationId: updateSongWithForm
      parameters:
        - name: songId
          in: path
          description: ID of song that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of song that needs to be updated
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Song'
        '405':
          description: Invalid input
      security:
        - musicservice_auth:
            - write:songs
            - read:songs 
    delete:
      tags:
        - song
      summary: Deletes a song
      description: delete a song
      operationId: deleteSong
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: songId
          in: path
          description: Song id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid song value
        '404':
          description: Song not found
      security:
        - api_key: []
        - musicservice_auth:
            - write:songs
            - read:songs
            
  /artist:
    put:
      tags:
        - artist
      summary: Update an existing artist
      description: Update an existing artist by Id
      operationId: updateArtist
      requestBody:
        description: Update an existent artist in the playlist
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Artist'
          application/xml:
            schema:
              $ref: '#/components/schemas/Artist'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Artist'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Invalid ID supplied
        '404':
          description: Artist not found
        '405':
          description: Validation exception
      security:
        - musicservice_auth:
            - write:artist
            - read:artist
    post:
      tags:
        - artist
      summary: Add a new artist to the music service
      description: Add a new artist to the music service
      operationId: addArtist
      requestBody:
        description: Create a new artist in the music service
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Artist'
          application/xml:
            schema:
              $ref: '#/components/schemas/Artist'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Artist'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Artist'
        '405':
          description: Invalid input
      security:
        - musicservice_auth:
            - write:artist
            - read:artist
  /artist/{artistId}:
    get:
      tags:
        - artist
      summary: Find artist by ID
      description: Returns a single artist
      operationId: getArtistById
      parameters:
        - name: artistId
          in: path
          description: ID of artisy to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Invalid ID supplied
        '404':
          description: Artist not found
      security:
        - musicservice_auth:
            - read:artist 
    post:
      tags:
        - artist
      summary: Updates a artist in the music service with form data
      description: ''
      operationId: updateArtistWithForm
      parameters:
        - name: artistId
          in: path
          description: ID of artist that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of artist that needs to be updated
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Artist'
        '405':
          description: Invalid input
      security:
        - musicservice_auth:
            - write:artist
            - read:artist
    delete:
      tags:
        - artist
      summary: Deletes a artist
      description: delete a artist
      operationId: deleteArtist
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: artistId
          in: path
          description: Artist id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid artist value
        '404':
          description: Artist not found
      security:
        - api_key: []
        - musicservice_auth:
            - write:artist
            - read:artist
            
  /implementation:
    put:
      tags:
        - implementation
      summary: Update an existing implementation
      description: Update an existing implementation by Id
      operationId: updateImplementation
      requestBody:
        description: Update an existent implementation in the playlist
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Implementation'
          application/xml:
            schema:
              $ref: '#/components/schemas/Implementation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Implementation'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Implementation'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Implementation'
        '400':
          description: Invalid ID supplied
        '404':
          description: implementation not found
        '405':
          description: Validation exception
      security:
        - musicservice_auth:
            - write:song
            - read:song
            - write:artist
            - read:artist
    post:
      tags:
        - implementation
      summary: Add a new implementation to the music service
      description: Add a new implementation to the music service
      operationId: addImplementation
      requestBody:
        description: Create a new implementation in the music service
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Implementation'
          application/xml:
            schema:
              $ref: '#/components/schemas/Implementation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Implementation'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Implementation'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Implementation'
        '405':
          description: Invalid input
      security:
        - musicservice_auth:
            - write:artist
            - read:artist
            - write:song
            - read:song
  /implementation/findByArtist:
    get:
      tags:
        - implementation
      summary: Finds Songs by artist
      description: Multiple artist values can be provided with comma separated strings
      operationId: findSongsByArtist
      parameters:
        - name: artist
          in: query
          description: Artist values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Implementation_info'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Implementation_info'
        '400':
          description: Invalid artist value
      security:
        - musicservice_auth:
            - read:artist
            - read:songs 
  /implementation/{implementationId}:
    get:
      tags:
        - implementation
      summary: Find implementation by ID
      description: Returns a single implementation
      operationId: getImplementationById
      parameters:
        - name: implementationId
          in: path
          description: ID of implementation to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Implementation_info'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Implementation_info'
        '400':
          description: Invalid ID supplied
        '404':
          description: implementation not found
      security:
        - musicservice_auth:
            - read:songs 
            - read:artist
    post:
      tags:
        - implementation 
      summary: Updates a implementation  in the music service with form data
      description: ''
      operationId: implementationSongWithForm
      parameters:
        - name: implementationId
          in: path
          description: ID of implementation  that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Implementation_info'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Implementation_info'
        '405':
          description: Invalid input
      security:
        - musicservice_auth:
            - write:songs
            - read:songs 
            - write:artist
            - read:artist 
    delete:
      tags:
        - implementation
      summary: Deletes an implementation
      description: delete an implementation
      operationId: deleteImplementation
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: implementationId
          in: path
          description: Implementation id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid artist value
        '404':
          description: Artist not found
      security:
        - api_key: []
        - musicservice_auth:
            - write:songs
            - read:songs 
            - write:artist
            - read:artist 
   
  /playlist:
    post:
      tags:
        - playlist
      summary: Add a playlist to the music service
      description:  Add a playlist to the music service
      operationId: addPlaylist
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Playlist'
          application/xml:
            schema:
              $ref: '#/components/schemas/Playlist'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Playlist'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
        '405':
          description: Invalid input
      security:
        - musicservice_auth:
            - read:playlist
            - write:playlist
    put:
      tags:
        - playlist
      summary: Update an existing playlist
      description: Update an existing playlist by Id
      operationId: updatePlaylist
      requestBody:
        description: Update an existent playlist
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Playlist'
          application/xml:
            schema:
              $ref: '#/components/schemas/Playlist'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Playlist'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Playlist'
        '400':
          description: Invalid ID supplied
        '404':
          description: Song not found
        '405':
          description: Validation exception
      security:
        - musicservice_auth:
            - read:playlist
            - write:playlist
  /playlist/{playlistId}:
    get:
      tags:
        - playlist
      summary: Find playlist info by ID
      description: Returns a single playlist info
      operationId: getPlaylistInfoById
      parameters:
        - name: playlistId
          in: path
          description: ID of playlist to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Playlist'
        '400':
          description: Invalid ID supplied
        '404':
          description: playlist not found
      security:
        - musicservice_auth:
            - read:playlist
    post:
      tags:
        - playlist
      summary: Updates a playlist info in the music service with form data
      description: ''
      operationId: updatePlaylistWithForm
      parameters:
        - name: playlistId
          in: path
          description: ID of playlist that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of playlist that needs to be updated
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Playlist'
        '405':
          description: Invalid input
      security:
        - musicservice_auth:
            - write:playlist
            - read:playlist
    delete:
      tags:
        - playlist
      summary: Deletes a playlist
      description: delete a playlist
      operationId: deletePlaylist
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: playlistId
          in: path
          description: Playlist id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid playlist value
        '404':
          description: playlist not found
      security:
        - api_key: []
        - musicservice_auth:
            - write:playlist
            - read:playlist
            
  /playlist_song:
    put:
      tags:
        - playlist_song
      summary: Update an existing song in playlist
      description: Update an existing song in playlist by Id
      operationId: updatePlaylistSong
      requestBody:
        description: Update an existent song in the playlist
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Playlist_song'
          application/xml:
            schema:
              $ref: '#/components/schemas/Playlist_song'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Playlist_song'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist_song_info'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Playlist_song_info'
        '400':
          description: Invalid ID supplied
        '404':
          description: song in playlist not found
        '405':
          description: Validation exception
      security:
        - musicservice_auth:
            - write:playlist
            - read:playlist
            - read:song
            - write:song
    post:
      tags:
        - playlist_song
      summary: Add a new song to the playlist
      description: Add a new song to the playlist
      operationId: addIPlaylistSong
      requestBody:
        description: Create a new song in the playlist
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Playlist_song'
          application/xml:
            schema:
              $ref: '#/components/schemas/Playlist_song'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Playlist_song'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist_song_info'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Playlist_song_info'
        '405':
          description: Invalid input
      security:
        - musicservice_auth:
            - write:playlist
            - read:playlist
            - read:song
            - write:song
  /playlist_song/{playlist_songId}:
    get:
      tags:
        - playlist_song
      summary: Find song in playlist by ID
      description: Returns a single song in playlist
      operationId: getPlaylistSongById
      parameters:
        - name: playlist_songId
          in: path
          description: ID of song in playlist to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist_song_info'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Playlist_song_info'
        '400':
          description: Invalid ID supplied
        '404':
          description: implementation not found
      security:
        - musicservice_auth:
            - read:playlist
            - read:song
    post:
      tags:
        - playlist_song
      summary: Updates song in the playlist with form data
      description: ''
      operationId: playlistSongWithForm
      parameters:
        - name: playlist_songId
          in: path
          description: ID of songs on playlist  that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist_song_info'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Playlist_song_info'         
        '405':
          description: Invalid input
      security:
        - musicservice_auth:
            - write:songs
            - read:songs 
            - write:artist
            - read:artist 
    delete:
      tags:
        - playlist_song
      summary: Deletes song in playlist
      description: delete song in playlist
      operationId: deletePlaylistSong
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: playlist_songId
          in: path
          description: playlist song id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid artist value
        '404':
          description: Artist not found
      security:
        - api_key: []
        - musicservice_auth:
            - write:playlist
            - read:playlist
            - write:song
            - read:song
            
  /user_playlist:
    put:
      tags:
        - user_playlist
      summary: Update an existing user playlist
      description: Update an existing user playlist by Id
      operationId: updateUserPLaylist
      requestBody:
        description: Update an existent user playlist
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User_playlist'
          application/xml:
            schema:
              $ref: '#/components/schemas/User_playlist'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User_playlist'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User_playlist_info'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User_playlist_info'
        '400':
          description: Invalid ID supplied
        '404':
          description: song in playlist not found
        '405':
          description: Validation exception
      security:
        - musicservice_auth:
            - write:playlist
            - read:playlist
            - read:user
            - write:user
    post:
      tags:
        - user_playlist
      summary: Add a new user playlist
      description: Add a new user playlist 
      operationId: addUserPlaylist
      requestBody:
        description: Create a new user playlist
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User_playlist'
          application/xml:
            schema:
              $ref: '#/components/schemas/User_playlist'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User_playlist'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User_playlist_info'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User_playlist_info'
        '405':
          description: Invalid input
      security:
        - musicservice_auth:
            - write:playlist
            - read:playlist
            - read:user
            - write:user
  /user_playlist/{user_playlistId}:
    get:
      tags:
        - user_playlist
      summary: Find user playlist info by ID
      description: Returns a single user playlist info
      operationId: getUserPlaylistInfoById
      parameters:
        - name: user_playlistId
          in: path
          description: ID of playlist to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User_playlist_info'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User_playlist_info'
        '400':
          description: Invalid ID supplied
        '404':
          description: playlist not found
        '405':
          description: access to the playlist is not allowed
      security:
        - musicservice_auth:
            - read:playlist
    post:
      tags:
        - playlist
      summary: Updates a user playlist in the music service with form data
      description: ''
      operationId: updateUserPlaylistWithForm
      parameters:
        - name: user_playlistId
          in: path
          description: ID of user playlist that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of user playlist that needs to be updated
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User_playlist_info'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User_playlist_info'
        '405':
          description: Invalid input
      security:
        - musicservice_auth:
            - write:playlist
            - read:playlist
    delete:
      tags:
        - user_playlist
      summary: Deletes an user playlist
      description: delete an user playlist
      operationId: deleteUserPlaylist
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: user_playlistId
          in: path
          description: User Playlist id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid playlist value
        '404':
          description: playlist not found
        '405':
          description: access to the playlist is not allowed
      security:
        - api_key: []
        - musicservice_auth:
            - write:playlist
            - read:playlist         
            
  /user_playlist/{username}:
    get:
      tags:
        - user_playlist
      summary: Get playists by user name
      description: ''
      operationId: getPlaylistByUserName
      parameters:
        - name: username
          in: path
          description: 'Username values that need to be considered for filter'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Playlist_songs_info'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Playlist_songs_info'
        '400':
          description: Invalid username value
        '405':
          description: access to the playlist is not allowed
      security:
        - musicservice_auth:
            - write:playlist
            - read:playlist
  /user_playlist/{username}/public:
    get:
      tags:
        - user_playlist
      summary: Get public playist by user name
      description: ''
      operationId: getPublicPlaylistByUserName
      parameters:
        - name: username
          in: path
          description: 'Username values that need to be considered for filter'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist_songs_info'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Playlist_songs_info'
        '400':
          description: Invalid username value
      
  /user_playlist/{username}/private:
    get:
      tags:
        - user_playlist
      summary: Get private playist by user name
      description: ''
      operationId: getPrivatePlaylistByUserName
      parameters:
        - name: username
          in: path
          description: 'Username values that need to be considered for filter'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist_songs_info'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Playlist_songs_info'
        '400':
          description: Invalid username value
        '405':
          description: access to the playlist is not allowed
      security:
        - musicservice_auth:
            - write:playlist
            - read:playlist
            
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '405':
          description: invalid input
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
        - musicservice_auth:
            - read:user
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User_id'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User_id'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
        - musicservice_auth:
            - read:user
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
        - musicservice_auth:
            - read:user
            - write:user
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
        - musicservice_auth:
            - read:user
            - write:user
            
            
components:
  schemas:
    Genre:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: pop
      xml:
        name: genre
    Album:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: album name
      xml:
        name: album
    User_id:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    User:
      type: object
      properties:
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Artist_id:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        dateOfBirthday:
          type: string
          format: date
          example: "2022-02-24"
        country:
          type: string
          example: Ukraine 
      xml:
        name: artist
    Artist:
      type: object
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        dateOfBirthday:
          type: string
          format: date
          example: "2022-02-24"
        country:
          type: string
          example: Ukraine 
      xml:
        name: artist
    Song_id:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: Song name
        lenght:
          type: number
          format: float
          example: 3.25
        language:
          type: string
          example: English
        release_date:
          type: string
          format: date
          example: "2022-02-24"
        genre:
          $ref: '#/components/schemas/Genre'
        album:
          $ref: '#/components/schemas/Album'
      xml:
        name: song
    Song:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          example: Song name
        lenght:
          type: number
          format: float
          example: 3.25
        language:
          type: string
          example: English
        release_date:
          type: string
          format: date
          example: "2022-02-24"
        genre:
          $ref: '#/components/schemas/Genre'
        album:
          $ref: '#/components/schemas/Album'
      xml:
        name: song
    Implementation:
      type: object
      properties:
        songId:
          type: integer
          format: int64
          example: 10
        artistId:
          type: integer
          format: int64
          example: 10
      xml:
        name: implementation
    Implementation_info:
      type: object
      properties:
        song:
          $ref: '#/components/schemas/Song'
        artist:
          $ref: '#/components/schemas/Artist'
      xml:
        name: implementation_info
    Playlist:
      type: object
      properties:
        name:
          type: string
          example: My playlist
        is_private:
          type: boolean
          default: false
        create_at:
          type: string
          format: date-time
        update_at:
          type: string
          format: date-time
        number_of_songs:
          type: integer
          format: int64
      xml:
        name: playlistInfo
    Playlist_song:
      type: object
      properties:
        playlist_id:
          type: integer
          format: int64
          example: 10
        song_id:
          type: integer
          format: int64
          example: 10
      xml:
        name: playlist_song
    Playlist_song_info:
      type: object
      properties:
        playlistInfo:
          $ref: '#/components/schemas/Playlist'
        song:
          $ref: '#/components/schemas/Song'
      xml:
        name: playlist_song_info
    User_playlist:
      type: object
      properties:
        playlist_id:
          type: integer
          format: int64
          example: 10
        song_id:
          type: integer
          format: int64
          example: 10
      xml:
        name: playlist_song
    User_playlist_info:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        playlist:
          $ref: '#/components/schemas/Playlist'
      xml:
        name: playlist_song
    Playlist_songs_info:
      type: object
      properties:
        playlistInfo:
          $ref: '#/components/schemas/Playlist'
        songs:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Song'
      xml:
        name: playlist_song_info
  requestBodies:
    SongArray:
      description: List of song object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Song'
    ArtistArray:
      description: List of artist object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Artist'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    musicservice_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://musicservice/oauth/authorize
          scopes:
            write:user: modify user 
            read:user: read user
            write:song: modify song 
            read:song: read your song
            write:playlist: modify playlist
            read:playlist: read your playlist
    api_key:
      type: apiKey
      name: api_key
      in: header