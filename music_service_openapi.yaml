openapi: 3.0.3
info:
  title: Music Service
  description: |-
   The service for creating playlists and editing songs, albums, artists, users resources.
  contact:
    email: anastasiia.kudybovska.kn.2021@lpnu.ua
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: https://musicservice/api/v1
tags:
  - name: user
    description: Operations about user
  - name: song
    description: Everything about songs
  - name: playlist
    description: Access to User songs
paths:
  /song:
    put:
      tags:
        - song
      summary: Update an existing song
      description: Update an existing song by Id
      operationId: updateSong
      requestBody:
        description: Update an existent song in the playlist
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Song'
          application/xml:
            schema:
              $ref: '#/components/schemas/Song'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Song'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Song'
        '400':
          description: Invalid ID supplied
        '404':
          description: Song not found
        '405':
          description: Validation exception
      security:
        - musicservice_auth:
            - write:song
            - read:song
    post:
      tags:
        - song
      summary: Add a new song to the music service
      description: Add a new song to the music service
      operationId: addSong
      requestBody:
        description: Create a new song in the music service
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Song'
          application/xml:
            schema:
              $ref: '#/components/schemas/Song'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Song'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Song'
        '405':
          description: Invalid input
      security:
        - musicservice_auth:
            - write:song
            - read:song
  /song/findByGenre:
    get:
      tags:
        - song
      summary: Finds Songs by genre
      description: Multiple genre values can be provided with comma separated strings
      operationId: findSongsByGenre
      parameters:
        - name: genre
          in: query
          description: Genre values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'
        '400':
          description: Invalid genre value
      security:
        - musicservice_auth:
            - read:songs
  /song/findByAlbum:
    get:
      tags:
        - song
      summary: Finds Songs by album
      description: Multiple album values can be provided with comma separated strings
      operationId: findSongsByAlbum
      parameters:
        - name: album
          in: query
          description: Album values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'
        '400':
          description: Invalid genre value
      security:
        - musicservice_auth:
            - read:songs 
  /song/findByLanguage:
    get:
      tags:
        - song
      summary: Finds Songs by language
      description: Multiple languages values can be provided with comma separated strings
      operationId: findSongsByLanguage
      parameters:
        - name: language
          in: query
          description: Language values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'
        '400':
          description: Invalid language value
      security:
        - musicservice_auth:
            - write:songs
            - read:songs 
  /song/findByArtist:
    get:
      tags:
        - song
      summary: Finds Songs by artist
      description: Multiple artist values can be provided with comma separated strings
      operationId: findSongsByArtist
      parameters:
        - name: artist
          in: query
          description: Artist values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'
        '400':
          description: Invalid artist value
      security:
        - musicservice_auth:
            - write:songs
            - read:songs 
  /songs:
    get:
      tags:
        - song
      summary: Get list of songs
      description: Returns a list of songs
      operationId: getSongs
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'
        '404':
          description: Songs not found
      security:
        - api_key: []
        - musicservice_auth:
            - read:songs 
            - write:songs
  /song/{songId}:
    get:
      tags:
        - song
      summary: Find song by ID
      description: Returns a single song
      operationId: getSongById
      parameters:
        - name: songId
          in: path
          description: ID of song to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Song'
        '400':
          description: Invalid ID supplied
        '404':
          description: Song not found
      security:
        - musicservice_auth:
            - read:songs 
    post:
      tags:
        - song
      summary: Updates a song in the music service with form data
      description: ''
      operationId: updateSongWithForm
      parameters:
        - name: songId
          in: path
          description: ID of song that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of song that needs to be updated
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Song'
        '405':
          description: Invalid input
      security:
        - musicservice_auth:
            - write:songs
            - read:songs 
    delete:
      tags:
        - song
      summary: Deletes a song
      description: delete a song
      operationId: deleteSong
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: songId
          in: path
          description: Song id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid song value
        '404':
          description: Song not found
      security:
        - api_key: []
        - musicservice_auth:
            - write:songs
            - read:songs 
  /playlist:
    post:
      tags:
        - playlist
      summary: Add a playlist to the music service
      description:  Add a playlist to the music service
      operationId: addPlaylist
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaylistSongsId'
          application/xml:
            schema:
              $ref: '#/components/schemas/PlaylistSongsId'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PlaylistSongsId'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
        '405':
          description: Invalid input
      security:
        - api_key: []
        - musicservice_auth:
            - read:playlist
            - write:playlist
    put:
      tags:
        - playlist
      summary: Update an existing playlist
      description: Update an existing playlist by Id
      operationId: updatePlaylist
      requestBody:
        description: Update an existent playlist
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaylistSongsId'
          application/xml:
            schema:
              $ref: '#/components/schemas/PlaylistSongsId'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PlaylistSongsId'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistSongsId'          
            application/xml:
              schema:
                $ref: '#/components/schemas/PlaylistSongsId'
        '400':
          description: Invalid ID supplied
        '404':
          description: Song not found
        '405':
          description: Validation exception
      security:
        - musicservice_auth:
            - read:playlist
            - write:playlist
  /playlist/{playlistId}:
    get:
      tags:
        - playlist
      summary: Find playlist info by ID
      description: Returns a single playlist info
      operationId: getPlaylistInfoById
      parameters:
        - name: playlistId
          in: path
          description: ID of playlist to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistInfo'          
            application/xml:
              schema:
                $ref: '#/components/schemas/PlaylistInfo'
        '400':
          description: Invalid ID supplied
        '404':
          description: playlist not found
      security:
        - musicservice_auth:
            - write:playlist
            - read:playlist
    post:
      tags:
        - playlist
      summary: Updates a playlist info in the music service with form data
      description: ''
      operationId: updatePlaylistWithForm
      parameters:
        - name: playlistId
          in: path
          description: ID of playlist that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of playlist that needs to be updated
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistSongsId'          
            application/xml:
              schema:
                $ref: '#/components/schemas/PlaylistSongsId'
        '405':
          description: Invalid input
      security:
        - musicservice_auth:
            - write:playlist
            - read:playlist
    delete:
      tags:
        - playlist
      summary: Deletes a playlist
      description: delete a playlist
      operationId: deletePlaylist
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: playlistId
          in: path
          description: Playlist id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid playlist value
        '404':
          description: playlist not found
      security:
        - api_key: []
        - musicservice_auth:
            - write:playlist
            - read:playlist
  /playlist/{playlistId}/songs:
    get:
      tags:
        - playlist
      summary: Get list of songs in playlist
      description: Returns playlist with songs
      operationId: getPlaylistSongs
      parameters:
        - name: playlistId
          in: path
          description: ID of playlist to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Playlist'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Playlist'
        '404':
          description: Playlist not found
      security:
        - api_key: []
        - musicservice_auth:
            - read:playlist
            - write:playlist
  /{username}/playlist:
    get:
      tags:
        - playlist
      summary: Get playist by user name
      description: ''
      operationId: getPlaylistByUserName
      parameters:
        - name: username
          in: path
          description: 'Username values that need to be considered for filter'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Playlist'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Playlist'
        '400':
          description: Invalid username value
      security:
        - api_key: []
        - musicservice_auth:
            - write:playlist
            - read:playlist
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '405':
          description: invalid input
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
        - musicservice_auth:
            - read:user
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
        - musicservice_auth:
            - read:user
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
        - musicservice_auth:
            - read:user
            - write:user
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
        - musicservice_auth:
            - read:user
            - write:user
components:
  schemas:
    Genre:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: pop
      xml:
        name: genre
    Album:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: album name
      xml:
        name: album
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Artist:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        dateOfBirthday:
          type: string
          format: date
          example: "2022-02-24"
        country:
          type: string
          example: Ukraine 
      xml:
        name: artist
    Song:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: Song name
        lenght:
          type: number
          format: float
          example: 3.25
        language:
          type: string
          example: English
        releaseDate:
          type: string
          format: date
          example: "2022-02-24"
        genre:
          $ref: '#/components/schemas/Genre'
        album:
          $ref: '#/components/schemas/Album'
        artist:
          $ref: '#/components/schemas/Artist'
      xml:
        name: song
    PlaylistInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        userId:
          type: integer
          format: int64
          example: 198772
        name:
          type: string
          example: My playlist
        isPrivate:
          type: boolean
          default: false
        createAt:
          type: string
          format: date-time
        updateAt:
          type: string
          format: date-time
        numberOfSongs:
          type: integer
          format: int64
      xml:
        name: playlistInfo
    Playlist:
      type: object
      properties:
        playlistInfo:
          $ref: '#/components/schemas/PlaylistInfo'
        songs:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Song'
      xml:
        name: playlist
    PlaylistSongsId:
      type: object
      properties:
        playlistInfo:
          $ref: '#/components/schemas/PlaylistInfo'
        songsID:
          type: array
          xml:
            wrapped: true
          items:
              type: integer
              format: int64
              example: 10
      xml:
        name: playlistSongsId
  requestBodies:
    Song:
      description: Song object that needs to be added to the music service
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Song'
        application/xml:
          schema:
            $ref: '#/components/schemas/Song'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    musicservice_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://musicservice/oauth/authorize
          scopes:
            write:user: modify user 
            read:user: read user
            write:song: modify song 
            read:song: read your song
            write:playlist: modify playlist
            read:playlist: read your playlist
    api_key:
      type: apiKey
      name: api_key
      in: header